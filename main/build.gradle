plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
}

def p = new Properties()
file("./.gradle/gradle.properties").withInputStream { p.load(it) }


group = 'net.kunmc.lab'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        credentials {
            username = p.getProperty('githubUserName')
            password = p.getProperty("githubToken")
        }
        name = 'flylib-github'
        url = uri('https://maven.pkg.github.com/TeamKun/FlyLib')
    }
}

dependencies {
    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'
    implementation 'com.flylib:flylib3:3.0.15.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


task deleteInLibsAndServer {
    delete("libs/*.jar")
    delete("../../server/plugins/*.jar")
}

task buildAndCopy(type: Copy) {
    from layout.buildDirectory.dir("libs")
    include '*.jar'
    into layout.buildDirectory.dir("../../server/plugins")
}

compileKotlin.dependsOn deleteInLibsAndServer
buildAndCopy.dependsOn jar